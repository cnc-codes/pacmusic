name: Deploy Production Server

on:
  release:
    types: [published]

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Deploy ke production via SSH
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_NAME_PRODUCTION }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
          script: |
            # Variables
            GIT_URL=${{ secrets.GIT_URL }}
            APP_PROD_PATH=${{ vars.APP_PROD_PATH }}
            APP_PROD_PORT_1=${{ vars.APP_PROD_PORT_1 }}
            APP_PROD_PORT_2=${{ vars.APP_PROD_PORT_2 }}
            PROD_DOMAIN=${{ vars.PROD_DOMAIN }}
            APP_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pacmusic
            APP_TAG=latest
            SSL_PATH=/etc/letsencrypt/live/$PROD_DOMAIN

            echo "üìÇ Deploying to $APP_PROD_PATH ..."

            # Clone/update repo
            if [[ -d "$APP_PROD_PATH/pacmusic/.git" ]]; then
              cd $APP_PROD_PATH/pacmusic
              git pull --rebase
            else
              rm -rf $APP_PROD_PATH/pacmusic
              git clone $GIT_URL $APP_PROD_PATH/pacmusic
              cd $APP_PROD_PATH/pacmusic
            fi

            # Generate .env
            echo "APP_PROD_PORT_1=$APP_PROD_PORT_1" > .env
            echo "APP_PROD_PORT_2=$APP_PROD_PORT_2" >> .env
            echo "APP_IMAGE=$APP_IMAGE" >> .env
            echo "APP_TAG=$APP_TAG" >> .env
            echo "PROD_DOMAIN=$PROD_DOMAIN" >> .env
            echo "SSL_PATH=$SSL_PATH" >> .env

            # Pull Docker image
            echo "üê≥ Pulling image $APP_IMAGE:$APP_TAG"
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker pull $APP_IMAGE:$APP_TAG

            # Stop old containers
            echo "üõë Stopping old production containers..."
            sudo docker compose down || true

            # Start production containers + nginx + certbot
            echo "üöÄ Starting new containers..."
            docker compose up --build --profile production --detach

            # Wait until all containers are running
            for i in {1..20}; do
              READY=true
              for C in pacmusic-prod-1 pacmusic-prod-2 pacmusic-nginx; do
                STATUS=$(sudo docker inspect -f '{{.State.Running}}' $C)
                if [ "$STATUS" != "true" ]; then
                  READY=false
                  break
                fi
              done
              if [ "$READY" = "true" ]; then
                echo "‚úÖ All production containers are running"
                break
              else
                echo "‚è≥ Waiting for containers... ($i/20)"
                sleep 5
              fi
            done

            if [ "$READY" != "true" ]; then
              echo "‚ùå Some production containers failed to start"
              exit 1

      # 3. Test production endpoint
      - name: Test Production Endpoint
        run: |
          PROD_URL="https://${{ vars.PROD_DOMAIN }}"
          echo "üîó Testing production endpoint: $PROD_URL"
          for i in {1..20}; do
            if curl -f $PROD_URL >/dev/null 2>&1; then
              echo "‚úÖ Production endpoint reachable!"
              exit 0
            else
              echo "‚è≥ Waiting for endpoint... ($i/20)"
              sleep 10
            fi
          done
          echo "‚ùå Production endpoint not reachable after multiple attempts"
          exit 1