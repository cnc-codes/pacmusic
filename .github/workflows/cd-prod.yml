name: Deploy Production üöÄ

on:
  release:
    types: [published]

jobs:
  deploy-production:
    name: Deploy to production server
    runs-on: ubuntu-latest
    environment: Production

    steps:
      # 1Ô∏è‚É£ Execute deployment on remote server via SSH
      - name: Execute deployment command
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_PROD_PATH: ${{ vars.APP_PROD_PATH }}
          GIT_URL: ${{ secrets.GIT_URL }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          APP_NAME: ${{ vars.APP_NAME }}
          APP_TAG: ${{ github.event.release.tag_name }}
          APP_HOST: localhost
          APP_PROD_PORT: ${{ secrets.APP_PROD_PORT }}
          MINIO_PROD_ACCESS_KEY: ${{ secrets.MINIO_PROD_ACCESS_KEY }}
          MINIO_PROD_SECRET_KEY: ${{ secrets.MINIO_PROD_SECRET_KEY }}
          MINIO_PROD_ENDPOINT: ${{ secrets.MINIO_PROD_ENDPOINT }}
        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_NAME_PRODUCTION }}
          key: ${{ secrets.SSH_PRIVAT_KEY_PRODUCTION }}
          envs: APP_PATH_PROD, GIT_URL, DOCKERHUB_USERNAME, DOCKERHUB_TOKEN, APP_NAME, APP_TAG, APP_HOST, APP_PORT, MINIO_PROD_ACCESS_KEY, MINIO_PROD_SECRET_KEY, MINIO_PROD_ENDPOINT
          script: |
            echo "üöÄ Starting PacMusic Production Deployment..."

            # Create ~/.ssh if not exists
            mkdir -p ~/.ssh

            # Add GitHub to known_hosts
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            # Clone or update repo
            if [[ -d "${APP_PATH_PROD}/pacmusic" ]]; then
              cd $APP_PATH_PROD/pacmusic
              sudo docker compose down
              git pull --rebase
            else
              git clone $GIT_URL $APP_PATH_PROD/pacmusic
              cd $APP_PATH_PROD/pacmusic
            fi

            # Ensure docker-compose.yml exists
            if [[ ! -f "docker-compose.yml" ]]; then
              echo "‚ùå docker-compose.yml not found in $APP_PATH_PROD/pacmusic"
              exit 1
            fi

            # Update .env file
            echo "APP_IMAGE=${DOCKERHUB_USERNAME}/${APP_NAME}" > .env
            echo "APP_TAG=$APP_TAG" >> .env
            echo "APP_HOST=$APP_HOST" >> .env
            echo "APP_PROD_PORT=$APP_PORT" >> .env
            echo "MINIO_PROD_ACCESS_KEY=$MINIO_PROD_ACCESS_KEY" >> .env
            echo "MINIO_PROD_SECRET_KEY=$MINIO_PROD_SECRET_KEY" >> .env
            echo "MINIO_PROD_ENDPOINT=$MINIO_PROD_ENDPOINT" >> .env

            # Login to Docker Hub
            sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN

            # Pull latest image
            sudo docker pull ${DOCKERHUB_USERNAME}/${APP_NAME}:$APP_TAG

            # Build and run container
            sudo docker compose up pacmusic-prod --build --detach

            # Wait until production server is ready
            for i in {1..20}; do
              if sudo docker exec pacmusic-prod curl -f http://localhost:$APP_PORT; then
                echo "‚úÖ Production server is up!"
                break
              else
                echo "‚è≥ Waiting for production server... ($i/20)"
                sleep 10
              fi

              if [[ $i -eq 20 ]]; then
                echo "‚ùå Production server failed to start after 200s"
                exit 1
              fi
            done

      # 2Ô∏è‚É£ Hit production endpoint
      - name: Hit Production Endpoint
        shell: bash
        env:
          PROD_URL: ${{ secrets.PROD_URL }}
        run: |
          for i in {1..20}; do
            if curl -f $PROD_URL; then
              echo "‚úÖ Production endpoint reachable!"
              break
            else
              echo "‚è≥ Waiting for production endpoint... ($i/20)"
              sleep 10
            fi

            if [[ $i -eq 20 ]]; then
              echo "‚ùå Production endpoint not reachable after 200s"
              exit 1
            fi
          done