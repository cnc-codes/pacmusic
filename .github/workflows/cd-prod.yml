name: Deploy Production Server

on:
  release:
    types: [published]

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Deploy ke production via SSH
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_NAME_PRODUCTION }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
          script: |
            set -euo pipefail
            IFS=$'\n\t'
            log() { echo "[$(date +'%H:%M:%S')] $*"; }

            log "üìÇ Deploying to production server..."

            # Variables
            GIT_URL=${{ secrets.GIT_URL }}
            APP_PROD_PATH=${{ vars.APP_PROD_PATH }}
            PROD_DOMAIN=${{ vars.PROD_DOMAIN }}
            APP_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pacmusic
            APP_TAG=latest
            SSL_PATH=/etc/letsencrypt/live/$PROD_DOMAIN

            # Clone/update repository
            if [[ -d "$APP_PROD_PATH/pacmusic/.git" ]]; then
              cd $APP_PROD_PATH/pacmusic
              git fetch --all
              git reset --hard origin/main
            else
              rm -rf $APP_PROD_PATH/pacmusic
              git clone $GIT_URL $APP_PROD_PATH/pacmusic
              cd $APP_PROD_PATH/pacmusic
            fi

            # Generate .env
            cat > .env <<EOF
              APP_PROD_PORT_1=${{ vars.APP_PROD_PORT_1 }}
              APP_PROD_PORT_2=${{ vars.APP_PROD_PORT_2 }}
              APP_IMAGE=$APP_IMAGE
              APP_TAG=$APP_TAG
              PROD_DOMAIN=$PROD_DOMAIN
              SSL_PATH=$SSL_PATH
              EOF

            # Docker login & pull image
            log "üê≥ Logging in & pulling Docker image..."
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker pull $APP_IMAGE:$APP_TAG

            # Stop old containers
            log "üõë Stopping old production containers..."
            sudo docker compose down || true

            # Ensure SSL exists
            if [ ! -d "./nginx/ssl/live/$PROD_DOMAIN" ]; then
              log "üîê Requesting SSL certificate via Certbot..."
              sudo docker compose run --rm pacmusic-certbot || true
            else
              log "üîê SSL certificate already exists"
            fi

            # Start production containers
            log "üöÄ Starting production containers..."
            COMPOSE_PROFILES=Production sudo docker compose up --build -d

            # Wait for containers to be healthy
            log "‚è≥ Waiting for containers to be healthy..."
            for i in $(seq 1 20); do
              HEALTHY=true
              for C in pacmusic-prod-1 pacmusic-prod-2 pacmusic-nginx; do
                STATUS=$(sudo docker inspect -f '{{.State.Health.Status}}' $C 2>/dev/null || echo "none")
                if [[ "$STATUS" != "healthy" ]]; then
                  HEALTHY=false
                  break
                fi
              done
              if [[ "$HEALTHY" == "true" ]]; then
                log "‚úÖ All production containers are healthy"
                break
              else
                log "‚è≥ Waiting for containers... ($i/20)"
                sleep 5
              fi
            done

            if [[ "$HEALTHY" != "true" ]]; then
              log "‚ùå Some production containers failed health check"
              exit 1

      # 3Ô∏è‚É£ Test production endpoint
      - name: Test Production Endpoint
        run: |
          PROD_URL="https://${{ vars.PROD_DOMAIN }}"
          echo "üîó Testing production endpoint: $PROD_URL"
          for i in $(seq 1 20); do
            if curl -f $PROD_URL >/dev/null 2>&1; then
              echo "‚úÖ Production endpoint reachable!"
              exit 0
            else
              echo "‚è≥ Waiting for endpoint... ($i/20)"
              sleep 10
            fi
          done
          echo "‚ùå Production endpoint not reachable after multiple attempts"
          exit 1