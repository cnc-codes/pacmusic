name: Deploy Production 

# on:
#   release:
#     types: [published]
on:
  push:
    branches:
      - main

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: SSH to Production Server
      - name: Deploy to Production (Debug with .env)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_NAME_PRODUCTION }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
          script: |
            set -x  # Enable command echoing for debugging

            # Variables
            APP_PROD_PATH=${{ vars.APP_PROD_PATH }}
            GIT_URL=${{ secrets.GIT_URL }}
            APP_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pacmusic
            APP_TAG=latest

            echo "üìÅ Go to repository or clone if not exists"
            if [[ -d "$APP_PROD_PATH/pacmusic/.git" ]]; then
              cd $APP_PROD_PATH/pacmusic
              git pull --rebase
            else
              rm -rf $APP_PROD_PATH/pacmusic
              git clone $GIT_URL $APP_PROD_PATH/pacmusic
              cd $APP_PROD_PATH/pacmusic
            fi

            echo "üìÑ Create/overwrite .env for Production"
            echo "APP_PROD_PORT_1=${{ vars.APP_PROD_PORT_1 }}" > .env
            echo "APP_PROD_PORT_2=${{ vars.APP_PROD_PORT_2 }}" >> .env
            echo "MINIO_ENDPOINT=${{ secrets.MINIO_PROD_ENDPOINT }}" >> .env
            echo "MINIO_ACCESS_KEY=${{ secrets.MINIO_PROD_ACCESS_KEY }}" >> .env
            echo "MINIO_SECRET_KEY=${{ secrets.MINIO_PROD_SECRET_KEY }}" >> .env
            echo "DOMAIN=${{ vars.PROD_DOMAIN }}" >> .env
            echo "EMAIL=${{ secrets.EMAIL }}" >> .env
            echo "APP_IMAGE=$APP_IMAGE" >> .env
            echo "APP_TAG=$APP_TAG" >> .env

            echo "üìÑ .env content for verification:"
            cat .env

            echo "üõë Stop old Production containers"
            sudo docker compose --profile Production down || true

            echo "üöÄ Build and start Production containers"
            sudo docker compose --profile Production up --build --detach

            echo "üìä List all containers"
            sudo docker compose ps

            echo "‚è≥ Wait until all Production containers are running"
            for svc in pacmusic-prod-1 pacmusic-prod-2; do
              for i in {1..20}; do
                STATUS=$(sudo docker inspect -f '{{.State.Running}}' $svc)
                if [ "$STATUS" = "true" ]; then
                  echo "‚úÖ $svc is running"
                  break
                else
                  echo "‚è≥ Waiting for $svc... ($i/20)"
                  sleep 5
                fi
              done

              echo "üìÑ Last 20 logs of $svc"
              sudo docker logs --tail 20 $svc || true
            done

      # Step 3: Test Production Endpoint
      - name: Test Production Endpoint
        run: |
          set -x
          PROD_DOMAIN=https://${{ vars.PROD_DOMAIN }}
          for i in {1..20}; do
            if curl -f $PROD_DOMAIN >/dev/null 2>&1; then
              echo "‚úÖ Production endpoint reachable!"
              break
            else
              echo "‚è≥ Waiting for endpoint... ($i/20)"
              sleep 10
            fi
          done
