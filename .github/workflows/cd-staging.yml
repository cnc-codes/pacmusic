name: Deploy Staging Server

on:
  push:
    branches:
      - main

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: Staging

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Deploy ke staging via SSH
      - name: Deploy to Staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER_NAME_STAGING }}
          key: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
          script: |
            # Variables
            GIT_URL=${{ secrets.GIT_URL }}
            APP_STG_PATH=${{ vars.APP_STG_PATH }}
            APP_STG_PORT_1=${{ vars.APP_STG_PORT_1 }}
            APP_STG_PORT_2=${{ vars.APP_STG_PORT_2 }}
            STG_DOMAIN=${{ vars.STG_DOMAIN }}
            STG_EMAIL=${{ secrets.EMAIL }}
            SSL_PATH=/etc/letsencrypt/live/$STG_DOMAIN
            APP_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pacmusic
            APP_TAG=latest

            echo "üìÇ Deploying to $APP_STG_PATH ..."

            # Clone or update repo
            if [[ -d "$APP_STG_PATH/pacmusic/.git" ]]; then
              cd $APP_STG_PATH/pacmusic
              git pull --rebase
            else
              rm -rf $APP_STG_PATH/pacmusic
              git clone $GIT_URL $APP_STG_PATH/pacmusic
              cd $APP_STG_PATH/pacmusic
            fi

            # Generate .env
            echo "APP_STG_PORT_1=$APP_STG_PORT_1" > .env
            echo "APP_STG_PORT_2=$APP_STG_PORT_2" >> .env
            echo "STG_DOMAIN=$STG_DOMAIN" >> .env
            echo "SSL_PATH=$SSL_PATH" >> .env
            echo "APP_IMAGE=$APP_IMAGE" >> .env
            echo "APP_TAG=$APP_TAG" >> .env

            # Pull Docker image
            echo "üê≥ Pulling image $APP_IMAGE:$APP_TAG"
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull $APP_IMAGE:$APP_TAG

            # Stop old containers
            echo "üõë Stopping old containers..."
            docker compose down || true

            # 1Ô∏è‚É£ Run certbot-init to ensure SSL exists
            echo "üîê Ensuring SSL certificate exists..."
            docker compose run --rm pacmusic-certbot || true

            # 2Ô∏è‚É£ Start app + Nginx + certbot auto-renew
            echo "üöÄ Starting app containers and Nginx..."
            docker compose up --build --profile Staging --detach

            # 3Ô∏è‚É£ Wait until all containers are running
            READY=false
            for i in $(seq 1 20); do
              READY=true
              for C in pacmusic-stg-1 pacmusic-stg-2 pacmusic-nginx; do
                STATUS=$(docker inspect -f '{{.State.Running}}' $C)
                if [ "$STATUS" != "true" ]; then
                  READY=false
                  break
                fi
              done

              if [ "$READY" = "true" ]; then
                echo "‚úÖ All staging containers are running"
                break
              else
                echo "‚è≥ Waiting for containers... ($i/20)"
                sleep 5
              fi
            done

            if [ "$READY" != "true" ]; then
              echo "‚ùå Some staging containers failed to start"
              exit 1
            fi

      # 3. Test staging endpoint
      - name: Test Staging Endpoint
        run: |
          STG_URL="https://${{ vars.STG_DOMAIN }}"
          echo "üîó Testing staging endpoint: $STG_URL"
          for i in $(seq 1 20); do
            if curl -f $STG_URL >/dev/null 2>&1; then
              echo "‚úÖ Staging endpoint reachable!"
              exit 0
            else
              echo "‚è≥ Waiting for endpoint... ($i/20)"
              sleep 10
            fi
          done
          echo "‚ùå Staging endpoint not reachable after multiple attempts"
          exit 1
